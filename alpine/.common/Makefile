# dockerfiles/alpine/.common
#
# Makefile for Alpine Linux images
.DEFAULT_GOAL := help

COMMON_DIR := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))

COMMON_ENVFILE ?= $(COMMON_DIR)/.env
ifneq ($(strip $(wildcard $(COMMON_ENVFILE))),)
	include $(COMMON_ENVFILE)
	export $(shell sed 's/=.*//' $(COMMON_ENVFILE))
endif

ENVFILE ?= .env
ifneq ($(strip $(wildcard $(ENVFILE))),)
	include $(ENVFILE)
	export $(shell sed 's/=.*//' $(ENVFILE))
endif

ifndef DOCKERFILES_DIR
$(error Required variable 'DOCKERFILES_DIR' not set)
endif

LOGGERFILE ?= $(DOCKERFILES_DIR)/.logger
ifneq ($(strip $(wildcard $(LOGGERFILE))),)
	include $(LOGGERFILE)
endif

BUILD_DEPS := $(shell find . -type f \( -iname '*' ! -iname '*build' \))

all: build deploy | all-requirements  ## Build and deploy image created from Dockerfile.

build: $(BUILD_DEPS) | build-requirements  ## Build image from Dockerfile.
	$(call TRACE, [$(IMAGE)] - Running '$@')
	@docker build \
		--rm \
		--force-rm \
		--cache-from $(IMAGE):latest \
		--tag $(REPO)/$(IMAGE):$(TAG) \
		--tag $(REPO)/$(IMAGE):$(ALPINE_VERSION) \
		--tag $(REPO)/$(IMAGE):$(BUILD_ID) \
		--tag $(REPO)/$(IMAGE):latest \
		--label $(LABEL_PREFIX).repo=$(REPO) \
		--label $(LABEL_PREFIX).tag=$(TAG) \
		--label $(LABEL_PREFIX).image=$(IMAGE) \
		--label $(LABEL_PREFIX).image.base=$(BASE_IMAGE) \
		--label $(LABEL_PREFIX).image.base.tag=$(BASE_IMAGE_TAG) \
		--build-arg LABEL_PREFIX=$(LABEL_PREFIX) \
		--build-arg BASE_IMAGE=$(BASE_IMAGE) \
		--build-arg BASE_IMAGE_TAG=$(BASE_IMAGE_TAG) \
		--build-arg USR=$(USR) \
		--build-arg GRP=$(GRP) \
		--build-arg UID=$(UID) \
		--build-arg GID=$(GID) \
		--build-arg COMMIT=$(COMMIT) \
		--build-arg BUILD_ID=$(BUILD_ID) \
		--build-arg BUILD_TS=$(BUILD_TS) \
		--build-arg INIT_VERSION=$(INIT_VERSION) \
		--build-arg MAINTAINER=$(MAINTAINER) \
		--build-arg ALPINE_VERSION=$(ALPINE_VERSION) \
		--file $(COMMON_DIR)/Dockerfile \
		.
	@echo $(REPO)/$(IMAGE):$(TAG) > $@ && touch -t $(BUILD_TS_TOUCH) $@
	$(call TRACE, [$(IMAGE)] - Completed '$@')

.PHONY: clean
clean: clean-requirements  ## Clean state generated by previous images built from Dockerfile.
	$(call TRACE, [$(IMAGE)] - Running '$@')
	@rm *build > /dev/null 2>&1 || true
	@docker system prune --all --force --filter "label=$(LABEL_PREFIX).image=$(IMAGE)" --filter "until=$(BUILD_TS)"
	$(call TRACE, [$(IMAGE)] - Completed '$@')

deploy: build | deploy-requirements  ## Deploy image built from Dockerfile.
	$(call TRACE, [$(IMAGE)] - Running '$@')
	@docker push $(REPO)/$(IMAGE):$(TAG)
	@docker push $(REPO)/$(IMAGE):$(ALPINE_VERSION)
	@docker push $(REPO)/$(IMAGE):$(BUILD_ID)
	@docker push $(REPO)/$(IMAGE):latest
	@echo $(REPO)/$(IMAGE):$(TAG) > $@ && touch -t $(BUILD_TS_TOUCH) $@
	$(call TRACE, [$(IMAGE)] - Completed '$@')

.PHONY: all-requirements
all-requirements: build-requirements deploy-requirements

.PHONY: build-requirements
build-requirements: requires-REPO \
	requires-LABEL_PREFIX \
	requires-TAG \
	requires-IMAGE \
	requires-ALPINE_VERSION \
	requires-COMMIT \
	requires-BUILD_ID \
	requires-BUILD_TS \
	requires-BASE_IMAGE \
	requires-USR \
	requires-GRP \
	requires-UID \
	requires-GID \
	requires-INIT_VERSION \
	requires-MAINTAINER

.PHONY: clean-requirements
clean-requirements: requires-IMAGE \
	requires-LABEL_PREFIX \
	requires-BUILD_TS

.PHONY: deploy-requirements
deploy-requirements: requires-REPO \
	requires-TAG \
	requires-IMAGE

requires-%:
	@if [ -z '${${*}}' ]; then echo 'Required variable "$*" not set' && exit 1; fi

.PHONY: help
help: ## Print Makefile usage.
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
